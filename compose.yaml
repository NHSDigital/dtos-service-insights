name: service-insights

services:
  # # External Dependencies
  # azurite:
  #   container_name: azurite
  #   image: mcr.microsoft.com/azure-storage/azurite
  #   command: azurite --silent
  #   network_mode: host

  # azurite-setup:
  #   container_name: azurite-setup
  #   build:
  #     context: ./
  #     dockerfile: ./Set-up/azurite/Dockerfile
  #   network_mode: host
  #   depends_on:
  #     - azurite
  #   environment:
  #     - AZURITE_CONNECTION_STRING=${AZURITE_CONNECTION_STRING}

  # sql-edge:
  #   container_name: db
  #   network_mode: host
  #   image: mcr.microsoft.com/azure-sql-edge
  #   environment:
  #     - ACCEPT_EULA=Y
  #     - MSSQL_SA_PASSWORD=${PASSWORD}
  #   cap_add:
  #     - SYS_PTRACE
  #   healthcheck:
  #     test: [ "CMD-SHELL", "curl -v --silent 127.0.0.1:1433 --stderr - | grep -q 'Empty reply from server'" ]
  #     interval: 15s
  #     timeout: 15s
  #     retries: 5
  #     start_period: 30s

  # db-setup:
  #   container_name: db-setup
  #   network_mode: host
  #   build: ./Set-up/database
  #   depends_on:
  #     sql-edge:
  #       condition: service_healthy
  #   environment:
  #     - PASSWORD=${PASSWORD}
  #     - DB_NAME=${DB_NAME}

  # # CaaS Integration Service
  # retrieve-mesh-file:
  #   container_name: retrieve-mesh-file
  #   network_mode: host
  #   build:
  #     context: ./src/Functions/
  #     dockerfile: CaasIntegration/RetrieveMeshFile/Dockerfile
  #   environment:
  #     - AzureWebJobsStorage=UseDevelopmentStorage=true
  #     - caasfolder_STORAGE=UseDevelopmentStorage=true
  #     - MeshApiBaseUrl=https://localhost:8700/messageexchange
  #     - BSSMailBox="X26ABC1"
  #     - MeshPassword = ${MESHPASSWORD}
  #     - MeshSharedKey = ${MESHSHAREDKEY}
  #     - MeshKeyPassphrase = ${MESHKEYPASSPHRASE}
  #     - ASPNETCORE_URLS=http://*:7060
  #   depends_on:
  #     - azurite

  # receive-caas-file:
  #   container_name: receive-caas-file
  #   network_mode: host
  #   build:
  #     context: ./src/Functions/
  #     dockerfile: CaasIntegration/receiveCaasFile/Dockerfile
  #   environment:
  #     - AzureWebJobsStorage=UseDevelopmentStorage=true
  #     - caasfolder_STORAGE=UseDevelopmentStorage=true
  #     - ASPNETCORE_URLS=http://*:7060
  #     - targetFunction=http://localhost:7061/api/processCaasFile
  #     - FileValidationURL=http://localhost:7073/api/FileValidation
  #     - DtOsDatabaseConnectionString=Server=localhost,1433;Database=${DB_NAME};User Id=SA;Password=${PASSWORD};TrustServerCertificate=True
  #   depends_on:
  #     - azurite

  # process-caas-file:
  #   container_name: process-caas-file
  #   network_mode: host
  #   build:
  #     context: ./src/Functions/
  #     dockerfile: CaasIntegration/processCaasFile/Dockerfile
  #   environment:
  #     - ASPNETCORE_URLS=http://*:7061
  #     - PMSAddParticipant=http://localhost:7062/api/addParticipant
  #     - PMSRemoveParticipant=http://localhost:7063/api/RemoveParticipant
  #     - PMSUpdateParticipant=http://localhost:7065/api/updateParticipant
  #     - DemographicURI=http://localhost:7076/api/DemographicDataFunction
  #     - ExceptionFunctionURL=http://localhost:7070/api/CreateException

  # Participant Management Service
  get-participant:
    container_name: get-participant
    # network_mode: host
    build:
      context: ./src/
      dockerfile: ./ParticipantManagementService/GetParticipant/Dockerfile
    ports:
      - "7073:7073"
    environment:
      - ASPNETCORE_URLS=http://*:7073

  update-participant:
    container_name: update-participant
    # network_mode: host
    build:
      context: ./src/
      dockerfile: ./ParticipantManagementService/GetParticipant/Dockerfile
    ports:
      - "7074:7074"
    environment:
      - ASPNETCORE_URLS=http://*:7074

  # Episode Data Service
  create-episode:
    container_name: create-episode
    # network_mode: host
    build:
      context: ./src/
      dockerfile: ./EpisodeDataService/CreateEpisode/Dockerfile
    ports:
      - "6007:6007"
    environment:
      - ASPNETCORE_URLS=http://*:6007
      - ServiceInsightsDbConnectionString=Server=localhost,1433;Database=${DB_NAME};User Id=SA;Password=${PASSWORD};TrustServerCertificate=True

  get-episode:
    container_name: get-episode
    # network_mode: host
    build:
      context: ./src/
      dockerfile: ./EpisodeDataService/GetEpisode/Dockerfile
    ports:
      - "6070:6070"
    environment:
      - ASPNETCORE_URLS=http://*:6070
      - ServiceInsightsDbConnectionString=Server=localhost,1433;Database=${DB_NAME};User Id=SA;Password=${PASSWORD};TrustServerCertificate=True

  # Episode Integration Service
  receive-data:
    container_name: receive-data
    # network_mode: host
    build:
      context: ./src/
      dockerfile: ./EpisodeIntegrationService/ReceiveData/Dockerfile
    ports:
      - "7071:7071"
    environment:
      - ASPNETCORE_URLS=http://*:7071

  process-data:
    container_name: process-data
    # network_mode: host
    build:
      context: ./src/
      dockerfile: ./EpisodeIntegrationService/ProcessData/Dockerfile
    ports:
      - "7072:7072"
    environment:
      - ASPNETCORE_URLS=http://*:7072

  # Episode Management Service
  create-update-episode:
    container_name: create-update-episode
    # network_mode: host
    build:
      context: ./src/
      dockerfile: ./EpisodeManagementService/CreateUpdateEpisode/Dockerfile
    ports:
      - "6006:6006"
    environment:
      - ASPNETCORE_URLS=http://*:6006

  mgmt-get-episode:
    container_name: mgmt-get-episode
    # network_mode: host
    build:
      context: ./src/
      dockerfile: ./EpisodeManagementService/GetEpisode/Dockerfile
    ports:
      - "6060:6060"
    environment:
      - ASPNETCORE_URLS=http://*:6060
