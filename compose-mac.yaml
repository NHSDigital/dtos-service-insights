name: service-insights

# Define network
networks:
  app-network:
    driver: bridge

# Define services
services:
  # External Dependencies
  azurite:
    container_name: azurite
    restart: on-failure
    image: mcr.microsoft.com/azure-storage/azurite
    command: azurite --blobHost 0.0.0.0 --blobPort 10000 --queueHost 0.0.0.0 --queuePort 10001 --tableHost 0.0.0.0 --tablePort 10002 --silent
    networks:
      - app-network
    ports:
      - "10000:10000"
      - "10001:10001"
      - "10002:10002"

  azurite-setup:
    container_name: azurite-setup
    restart: on-failure
    build:
      context: ./scripts
      dockerfile: ./azurite/Dockerfile
    depends_on:
      - azurite
    networks:
      - app-network
    environment:
      - AZURITE_CONNECTION_STRING=${AZURITE_CONNECTION_STRING}
      - AZURITE_CONTAINER_NAME=${AZURITE_CONTAINER_NAME}

  sql-database:
    container_name: sql-database
    restart: on-failure
    # image: mcr.microsoft.com/azure-sql-database
    image: mcr.microsoft.com/mssql/server:2022-latest
    networks:
      - app-network
    ports:
      - "1433:1433"
    environment:
      - ACCEPT_EULA=Y
      - MSSQL_SA_PASSWORD=${PASSWORD}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "grep -q 'SQL Server is now ready for client connections' /var/opt/mssql/log/errorlog || exit 1",
        ]
      interval: 15s
      timeout: 15s
      retries: 5
      start_period: 30s

  database-setup:
    container_name: database-setup
    restart: on-failure
    build:
      context: ./scripts/
      dockerfile: ./database/Dockerfile
    depends_on:
      sql-database:
        condition: service_healthy
    networks:
      - app-network
    environment:
      - PASSWORD=${PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_CONNECTION=${DB_CONNECTION}

  # BI Analytics Data Service
  create-participant-screening-episode-data:
    container_name: create-participant-screening-episode-data
    restart: always
    build:
      context: ./src/
      dockerfile: ./BIAnalyticsDataService/CreateParticipantScreeningEpisode/Dockerfile
    networks:
      - app-network
    ports:
      - "6010:6010"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - FUNCTIONS_WORKER_RUNTIME=dotnet-isolated
      - ASPNETCORE_URLS=http://*:6010
      - ServiceInsightsDbConnectionString=Server=${DB_CONNECTION},1433;Database=${DB_NAME};User Id=SA;Password=${PASSWORD};TrustServerCertificate=True

  create-participant-screening-profile-data:
    container_name: create-participant-screening-profile-data
    restart: always
    build:
      context: ./src/
      dockerfile: ./BIAnalyticsDataService/CreateParticipantScreeningProfile/Dockerfile
    networks:
      - app-network
    ports:
      - "6011:6011"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - FUNCTIONS_WORKER_RUNTIME=dotnet-isolated
      - ASPNETCORE_URLS=http://*:6011
      - ServiceInsightsDbConnectionString=Server=${DB_CONNECTION},1433;Database=${DB_NAME};User Id=SA;Password=${PASSWORD};TrustServerCertificate=True

  # BI Analytics Service
  create-participant-screening-episode:
    container_name: create-participant-screening-episode
    restart: always
    build:
      context: ./src/
      dockerfile: ./BIAnalyticsService/CreateParticipantScreeningEpisode/Dockerfile
    networks:
      - app-network
    ports:
      - "6008:6008"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - FUNCTIONS_WORKER_RUNTIME=dotnet-isolated
      - ASPNETCORE_URLS=http://*:6008
      - GetEpisodeUrl=http://get-episode-mgmt:6060/api/GetEpisode
      - CreateParticipantScreeningEpisodeUrl=http://create-participant-screening-episode-data:6010/api/CreateParticipantScreeningEpisode

  create-participant-screening-profile:
    container_name: create-participant-screening-profile
    restart: always
    build:
      context: ./src/
      dockerfile: ./BIAnalyticsService/CreateParticipantScreeningProfile/Dockerfile
    networks:
      - app-network
    ports:
      - "6009:6009"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - FUNCTIONS_WORKER_RUNTIME=dotnet-isolated
      - ASPNETCORE_URLS=http://*:6009
      - GetParticipantUrl=http://get-participant:6061/api/GetParticipant
      - CreateParticipantScreeningProfileUrl=http://create-participant-screening-profile-data:6011/api/CreateParticipantScreeningProfile
      - DemographicsServiceUrl=http://get-demographics-data:6080/api/GetDemographicsData

  # Demographics Service
  get-demographics-data:
    container_name: get-demographics-data
    restart: always
    build:
      context: ./src/
      dockerfile: ./DemographicsService/GetDemographicsData/Dockerfile
    networks:
      - app-network
    ports:
      - "6080:6080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://*:6080

  # Episode Data Service
  create-episode:
    container_name: create-episode
    restart: always
    build:
      context: ./src/
      dockerfile: ./EpisodeDataService/CreateEpisode/Dockerfile
    networks:
      - app-network
    ports:
      - "6007:6007"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://*:6007
      - ServiceInsightsDbConnectionString=Server=${DB_CONNECTION},1433;Database=${DB_NAME};User Id=SA;Password=${PASSWORD};TrustServerCertificate=True

  get-episode:
    container_name: get-episode
    restart: always
    build:
      context: ./src/
      dockerfile: ./EpisodeDataService/GetEpisode/Dockerfile
    networks:
      - app-network
    ports:
      - "6070:6070"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - FUNCTIONS_WORKER_RUNTIME=dotnet-isolated
      - ASPNETCORE_URLS=http://*:6070
      - ServiceInsightsDbConnectionString=Server=${DB_CONNECTION},1433;Database=${DB_NAME};User Id=SA;Password=${PASSWORD};TrustServerCertificate=True

  update-episode:
    container_name: update-episode
    restart: always
    build:
      context: ./src/
      dockerfile: ./EpisodeDataService/UpdateEpisode/Dockerfile
    networks:
      - app-network
    ports:
      - "7777:7777"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - FUNCTIONS_WORKER_RUNTIME=dotnet-isolated
      - ASPNETCORE_URLS=http://*:7777
      - ServiceInsightsDbConnectionString=Server=${DB_CONNECTION},1433;Database=${DB_NAME};User Id=SA;Password=${PASSWORD};TrustServerCertificate=True

  # Episode Integration Service
  receive-data:
    container_name: receive-data
    restart: always
    build:
      context: ./src/
      dockerfile: ./EpisodeIntegrationService/ReceiveData/Dockerfile
    depends_on:
      - azurite
    networks:
      - app-network
    ports:
      - "7072:7072"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - AzureWebJobsStorage=${AZURITE_CONNECTION_STRING}
      - FUNCTIONS_WORKER_RUNTIME=dotnet-isolated
      - ASPNETCORE_URLS=http://*:7072
      - EpisodeManagementUrl=http://create-update-episode:6006/api/CreateUpdateEpisode
      - ParticipantManagementUrl=http://update-participant:7074/api/UpdateParticipant

  # Episode Management Service
  create-update-episode:
    container_name: create-update-episode
    restart: always
    build:
      context: ./src/
      dockerfile: ./EpisodeManagementService/CreateUpdateEpisode/Dockerfile
    networks:
      - app-network
    ports:
      - "6006:6006"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - FUNCTIONS_WORKER_RUNTIME=dotnet-isolated
      - ASPNETCORE_URLS=http://*:6006
      - CreateEpisodeUrl=http://create-episode:6007/api/CreateEpisode
      - GetEpisodeUrl=http://get-episode-mgmt:6060/api/GetEpisode
      - UpdateEpisodeUrl=http://update-episode:7777/api/UpdateEpisode

  get-episode-mgmt:
    container_name: get-episode-mgmt
    restart: always
    build:
      context: ./src/
      dockerfile: ./EpisodeManagementService/GetEpisode/Dockerfile
    networks:
      - app-network
    ports:
      - "6060:6060"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - FUNCTIONS_WORKER_RUNTIME=dotnet-isolated
      - ASPNETCORE_URLS=http://*:6060
      - GetEpisodeUrl=http://get-episode:6070/api/GetEpisode

  # Mesh Mailbox Management Service
  retrieve-mesh-file:
    container_name: retrieve-mesh-file
    restart: always
    build:
      context: ./src/
      dockerfile: ./MeshIntegrationService/RetrieveMeshFile/Dockerfile
    depends_on:
      - azurite
    networks:
      - app-network
    ports:
      - "6777:6777"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - AzureWebJobsStorage=${AZURITE_CONNECTION_STRING}
      - FUNCTIONS_WORKER_RUNTIME=dotnet-isolated
      - ASPNETCORE_URLS=http://*:6777
      - MeshApiBaseUrl=${MESHAPIBASEURL}
      - BSSMailBox=${BSSMAILBOX}
      - BSSContainerName=${AZURITE_CONTAINER_NAME}
      - MeshPassword=${MESHPASSWORD}
      - MeshSharedKey=${MESHSHAREDKEY}
      - MeshKeyPassphrase=${MESHKEYPASSPHRASE}
      - TimerExpression=*/5 * * * *

  # Participant Management Service
  get-participant:
    container_name: get-participant
    restart: always
    build:
      context: ./src/
      dockerfile: ./ParticipantManagementService/GetParticipant/Dockerfile
    networks:
      - app-network
    ports:
      - "6061:6061"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - FUNCTIONS_WORKER_RUNTIME=dotnet-isolated
      - ASPNETCORE_URLS=http://*:6061

  update-participant:
    container_name: update-participant
    restart: always
    build:
      context: ./src/
      dockerfile: ./ParticipantManagementService/UpdateParticipant/Dockerfile
    networks:
      - app-network
    ports:
      - "7074:7074"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - FUNCTIONS_WORKER_RUNTIME=dotnet-isolated
      - ASPNETCORE_URLS=http://*:7074

  # Reference Data Service
  get-organisation-data:
    container_name: get-organisation-data
    restart: always
    build:
      context: ./src/
      dockerfile: ./ReferenceDataService/GetOrganisationData/Dockerfile
    networks:
      - app-network
    ports:
      - "6081:6081"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - FUNCTIONS_WORKER_RUNTIME=dotnet-isolated
      - ASPNETCORE_URLS=http://*:6081
      - ServiceInsightsDbConnectionString=Server=${DB_CONNECTION},1433;Database=${DB_NAME};User Id=SA;Password=${PASSWORD};TrustServerCertificate=True
